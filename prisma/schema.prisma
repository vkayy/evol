// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url = env("DATABASE_URL")
}

model Profile {
  id String @id @db.Uuid
  email String @unique @db.Text
  name String?
  imageUrl String? @db.Text

  members Member[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt @default(now())

  @@map("profile")
}

model Evolution {
  id String @id @db.Uuid
  name String
  startDate DateTime?
  description String?

  members Member[]
  events Event[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt @default(now())

  @@map("evolution")
}

model Member {
  id String @id @db.Uuid

  thoughts Thought[]

  profileId String @db.Uuid
  profile Profile @relation(fields: [profileId], references: [id], onDelete: Cascade)

  evolutionId String @db.Uuid
  evolution Evolution @relation(fields: [evolutionId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt @default(now())

  @@map("member")
}

enum EventType {
  ANNIVERSARY
  ARGUMENT
  BIRTHDAY
  CHILDBIRTH
  DATE
  ENGAGEMENT
  FIRST
  HANGOUT
  MARRIAGE
  MILESTONE
  MOVING_IN
  PARTY
  VACATION
  OTHER
}

model Event {
  id String @id @db.Uuid
  name String
  date DateTime
  type EventType
  description String?

  thoughts Thought[]

  evolutionId String @db.Uuid
  evolution Evolution @relation(fields: [evolutionId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt @default(now())

  @@map("event")
}

model Thought {
  id String @id @db.Uuid
  message String

  eventId String @db.Uuid
  event Event @relation(fields: [eventId], references: [id], onDelete: Cascade)

  memberId String @db.Uuid
  member Member @relation(fields: [memberId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt @default(now())

  @@map("thought")
}